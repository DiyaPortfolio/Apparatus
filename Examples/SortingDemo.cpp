#include <iostream>
#include <array>
#include <sorting.h>
#include <chrono>

template<typename T>

void insertion_sort(T& arr);

std::array<int, 10000> values = {};
int main() {
    // auto start = std::chrono::high_resolution_clock::now();
    // sort<insertion_sort_policy_t>(values);
    // auto stop = std::chrono::high_resolution_clock::now();
    // auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
    // std::cout << duration.count() << std::endl;

    // auto start1 = std::chrono::high_resolution_clock::now();
    // insertion_sort(values2);
    // auto stop1 = std::chrono::high_resolution_clock::now();
    // auto duration1 = std::chrono::duration_cast<std::chrono::milliseconds>(stop1 - start1);
    // std::cout << duration1.count() << std::endl;

    
    std::cout << values[0] << std::endl;
    auto start = std::chrono::high_resolution_clock::now();
    sort<quick_sort_policy_t>(values);
    auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
    std::cout << values[0] << std::endl;
    std::cout << duration.count() << std::endl;
}

template <typename T>
void insertion_sort(T& arr) {
    int i, key, j;
        for (i = 1; i < arr.size(); i++) {
            key = arr[i];
            j = i - 1;

            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
}